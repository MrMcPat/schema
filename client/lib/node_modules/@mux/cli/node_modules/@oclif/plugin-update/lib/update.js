"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable unicorn/prefer-module */
const color_1 = require("@oclif/color");
const core_1 = require("@oclif/core");
const spawn = require("cross-spawn");
const fs = require("fs-extra");
const _ = require("lodash");
const path = require("path");
const tar_1 = require("./tar");
const util_1 = require("./util");
class UpdateCli {
    constructor(options) {
        this.options = options;
        this.clientRoot = this.options.config.scopedEnvVar('OCLIF_CLIENT_HOME') || path.join(this.options.config.dataDir, 'client');
        this.clientBin = path.join(this.clientRoot, 'bin', this.options.config.windows ? `${this.options.config.bin}.cmd` : this.options.config.bin);
    }
    async runUpdate() {
        if (this.options.autoUpdate)
            await this.debounce();
        this.channel = this.options.channel || await this.determineChannel();
        if (this.options.fromLocal) {
            await this.ensureClientDir();
            core_1.CliUx.ux.debug(`Looking for locally installed versions at ${this.clientRoot}`);
            // Do not show known non-local version folder names, bin and current.
            const versions = fs.readdirSync(this.clientRoot).filter(dirOrFile => dirOrFile !== 'bin' && dirOrFile !== 'current');
            if (versions.length === 0)
                throw new Error('No locally installed versions found.');
            core_1.CliUx.ux.log(`Found versions: \n${versions.map(version => `     ${version}`).join('\n')}\n`);
            const pinToVersion = await this.options.getPinToVersion();
            if (!versions.includes(pinToVersion))
                throw new Error(`Version ${pinToVersion} not found in the locally installed versions.`);
            if (!await fs.pathExists(path.join(this.clientRoot, pinToVersion))) {
                throw new Error(`Version ${pinToVersion} is not already installed at ${this.clientRoot}.`);
            }
            core_1.CliUx.ux.action.start(`${this.options.config.name}: Updating CLI`);
            core_1.CliUx.ux.debug(`switching to existing version ${pinToVersion}`);
            this.updateToExistingVersion(pinToVersion);
            core_1.CliUx.ux.log();
            core_1.CliUx.ux.log(`Updating to an already installed version will not update the channel. If autoupdate is enabled, the CLI will eventually be updated back to ${this.channel}.`);
        }
        else {
            core_1.CliUx.ux.action.start(`${this.options.config.name}: Updating CLI`);
            await this.options.config.runHook('preupdate', { channel: this.channel });
            const manifest = await this.fetchManifest();
            this.currentVersion = await this.determineCurrentVersion();
            this.updatedVersion = manifest.sha ? `${manifest.version}-${manifest.sha}` : manifest.version;
            const reason = await this.skipUpdate();
            if (reason)
                core_1.CliUx.ux.action.stop(reason || 'done');
            else
                await this.update(manifest);
            core_1.CliUx.ux.debug('tidy');
            await this.tidy();
            await this.options.config.runHook('update', { channel: this.channel });
        }
        core_1.CliUx.ux.debug('done');
        core_1.CliUx.ux.action.stop();
    }
    async fetchManifest() {
        const http = require('http-call').HTTP;
        core_1.CliUx.ux.action.status = 'fetching manifest';
        try {
            const url = this.options.config.s3Url(this.options.config.s3Key('manifest', {
                channel: this.channel,
                platform: this.options.config.platform,
                arch: this.options.config.arch,
            }));
            const { body } = await http.get(url);
            // in case the content-type is not set, parse as a string
            // this will happen if uploading without `oclif-dev publish`
            if (typeof body === 'string') {
                return JSON.parse(body);
            }
            return body;
        }
        catch (error) {
            if (error.statusCode === 403)
                throw new Error(`HTTP 403: Invalid channel ${this.channel}`);
            throw error;
        }
    }
    async downloadAndExtract(output, manifest, channel) {
        const { version, gz, sha256gz } = manifest;
        const filesize = (n) => {
            const [num, suffix] = require('filesize')(n, { output: 'array' });
            return num.toFixed(1) + ` ${suffix}`;
        };
        const http = require('http-call').HTTP;
        const gzUrl = gz || this.options.config.s3Url(this.options.config.s3Key('versioned', {
            version,
            channel,
            bin: this.options.config.bin,
            platform: this.options.config.platform,
            arch: this.options.config.arch,
            ext: 'gz',
        }));
        const { response: stream } = await http.stream(gzUrl);
        stream.pause();
        const baseDir = manifest.baseDir || this.options.config.s3Key('baseDir', {
            version,
            channel,
            bin: this.options.config.bin,
            platform: this.options.config.platform,
            arch: this.options.config.arch,
        });
        const extraction = (0, tar_1.extract)(stream, baseDir, output, sha256gz);
        // to-do: use cli.action.type
        if (core_1.CliUx.ux.action.frames) {
            // if spinner action
            const total = Number.parseInt(stream.headers['content-length'], 10);
            let current = 0;
            const updateStatus = _.throttle((newStatus) => {
                core_1.CliUx.ux.action.status = newStatus;
            }, 250, { leading: true, trailing: false });
            stream.on('data', data => {
                current += data.length;
                updateStatus(`${filesize(current)}/${filesize(total)}`);
            });
        }
        stream.resume();
        await extraction;
    }
    async update(manifest, channel = 'stable') {
        core_1.CliUx.ux.action.start(`${this.options.config.name}: Updating CLI from ${color_1.default.green(this.currentVersion)} to ${color_1.default.green(this.updatedVersion)}${channel === 'stable' ? '' : ' (' + color_1.default.yellow(channel) + ')'}`);
        await this.ensureClientDir();
        const output = path.join(this.clientRoot, this.updatedVersion);
        if (!await fs.pathExists(output)) {
            await this.downloadAndExtract(output, manifest, channel);
        }
        await this.setChannel();
        await this.createBin(this.updatedVersion);
        await this.touch();
        await this.reexec();
    }
    async updateToExistingVersion(version) {
        await this.createBin(version);
        await this.touch();
    }
    async skipUpdate() {
        if (!this.options.config.binPath) {
            const instructions = this.options.config.scopedEnvVar('UPDATE_INSTRUCTIONS');
            if (instructions)
                core_1.CliUx.ux.warn(instructions);
            return 'not updatable';
        }
        if (this.currentVersion === this.updatedVersion) {
            if (this.options.config.scopedEnvVar('HIDE_UPDATED_MESSAGE'))
                return 'done';
            return `already on latest version: ${this.currentVersion}`;
        }
        return false;
    }
    async determineChannel() {
        const channelPath = path.join(this.options.config.dataDir, 'channel');
        if (fs.existsSync(channelPath)) {
            const channel = await fs.readFile(channelPath, 'utf8');
            return String(channel).trim();
        }
        return this.options.config.channel || 'stable';
    }
    async determineCurrentVersion() {
        try {
            const currentVersion = await fs.readFile(this.clientBin, 'utf8');
            const matches = currentVersion.match(/\.\.[/\\|](.+)[/\\|]bin/);
            return matches ? matches[1] : this.options.config.version;
        }
        catch (error) {
            core_1.CliUx.ux.debug(error);
        }
        return this.options.config.version;
    }
    s3ChannelManifestKey(bin, platform, arch, folder = '') {
        let s3SubDir = folder || '';
        if (s3SubDir !== '' && s3SubDir.slice(-1) !== '/')
            s3SubDir = `${s3SubDir}/`;
        return path.join(s3SubDir, 'channels', this.channel, `${bin}-${platform}-${arch}-buildmanifest`);
    }
    async setChannel() {
        const channelPath = path.join(this.options.config.dataDir, 'channel');
        fs.writeFile(channelPath, this.channel, 'utf8');
    }
    async logChop() {
        try {
            core_1.CliUx.ux.debug('log chop');
            const logChopper = require('log-chopper').default;
            await logChopper.chop(this.options.config.errlog);
        }
        catch (error) {
            core_1.CliUx.ux.debug(error.message);
        }
    }
    async mtime(f) {
        const { mtime } = await fs.stat(f);
        return mtime;
    }
    // when autoupdating, wait until the CLI isn't active
    async debounce() {
        let output = false;
        const lastrunfile = path.join(this.options.config.cacheDir, 'lastrun');
        const m = await this.mtime(lastrunfile);
        m.setHours(m.getHours() + 1);
        if (m > new Date()) {
            const msg = `waiting until ${m.toISOString()} to update`;
            if (output) {
                core_1.CliUx.ux.debug(msg);
            }
            else {
                await core_1.CliUx.ux.log(msg);
                output = true;
            }
            await (0, util_1.wait)(60 * 1000); // wait 1 minute
            return this.debounce();
        }
        core_1.CliUx.ux.log('time to update');
    }
    // removes any unused CLIs
    async tidy() {
        try {
            const root = this.clientRoot;
            if (!await fs.pathExists(root))
                return;
            const files = await (0, util_1.ls)(root);
            const promises = files.map(async (f) => {
                if (['bin', 'current', this.options.config.version].includes(path.basename(f.path)))
                    return;
                const mtime = f.stat.mtime;
                mtime.setHours(mtime.getHours() + (42 * 24));
                if (mtime < new Date()) {
                    await fs.remove(f.path);
                }
            });
            for (const p of promises)
                await p; // eslint-disable-line no-await-in-loop
            await this.logChop();
        }
        catch (error) {
            core_1.CliUx.ux.warn(error);
        }
    }
    async touch() {
        // touch the client so it won't be tidied up right away
        try {
            const p = path.join(this.clientRoot, this.options.config.version);
            core_1.CliUx.ux.debug('touching client at', p);
            if (!await fs.pathExists(p))
                return;
            await fs.utimes(p, new Date(), new Date());
        }
        catch (error) {
            core_1.CliUx.ux.warn(error);
        }
    }
    async reexec() {
        core_1.CliUx.ux.action.stop();
        return new Promise((_, reject) => {
            core_1.CliUx.ux.debug('restarting CLI after update', this.clientBin);
            spawn(this.clientBin, ['update'], {
                stdio: 'inherit',
                env: Object.assign(Object.assign({}, process.env), { [this.options.config.scopedEnvVarKey('HIDE_UPDATED_MESSAGE')]: '1' }),
            })
                .on('error', reject)
                .on('close', (status) => {
                try {
                    if (status > 0)
                        this.options.exit(status);
                }
                catch (error) {
                    reject(error);
                }
            });
        });
    }
    async createBin(version) {
        const dst = this.clientBin;
        const { bin, windows } = this.options.config;
        const binPathEnvVar = this.options.config.scopedEnvVarKey('BINPATH');
        const redirectedEnvVar = this.options.config.scopedEnvVarKey('REDIRECTED');
        if (windows) {
            const body = `@echo off
setlocal enableextensions
set ${redirectedEnvVar}=1
set ${binPathEnvVar}=%~dp0${bin}
"%~dp0..\\${version}\\bin\\${bin}.cmd" %*
`;
            await fs.outputFile(dst, body);
        }
        else {
            /* eslint-disable no-useless-escape */
            const body = `#!/usr/bin/env bash
set -e
get_script_dir () {
  SOURCE="\${BASH_SOURCE[0]}"
  # While $SOURCE is a symlink, resolve it
  while [ -h "$SOURCE" ]; do
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    SOURCE="$( readlink "$SOURCE" )"
    # If $SOURCE was a relative symlink (so no "/" as prefix, need to resolve it relative to the symlink base directory
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
  done
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  echo "$DIR"
}
DIR=$(get_script_dir)
${binPathEnvVar}="\$DIR/${bin}" ${redirectedEnvVar}=1 "$DIR/../${version}/bin/${bin}" "$@"
`;
            /* eslint-enable no-useless-escape */
            await fs.remove(dst);
            await fs.outputFile(dst, body);
            await fs.chmod(dst, 0o755);
            await fs.remove(path.join(this.clientRoot, 'current'));
            await fs.symlink(`./${version}`, path.join(this.clientRoot, 'current'));
        }
    }
    async ensureClientDir() {
        try {
            await fs.mkdirp(this.clientRoot);
        }
        catch (error) {
            if (error.code === 'EEXIST') {
                // for some reason the client directory is sometimes a file
                // if so, this happens. Delete it and recreate
                await fs.remove(this.clientRoot);
                await fs.mkdirp(this.clientRoot);
            }
            else {
                throw error;
            }
        }
    }
}
exports.default = UpdateCli;
