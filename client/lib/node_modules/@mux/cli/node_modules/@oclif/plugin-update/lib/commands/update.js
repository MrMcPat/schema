"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const path = require("path");
const update_1 = require("../update");
async function getPinToVersion() {
    return core_1.CliUx.ux.prompt('Enter a version to update to');
}
class UpdateCommand extends core_1.Command {
    constructor() {
        super(...arguments);
        this.clientRoot = this.config.scopedEnvVar('OCLIF_CLIENT_HOME') || path.join(this.config.dataDir, 'client');
        this.clientBin = path.join(this.clientRoot, 'bin', this.config.windows ? `${this.config.bin}.cmd` : this.config.bin);
    }
    async run() {
        const { args, flags } = await this.parse(UpdateCommand);
        const updateCli = new update_1.default({ channel: args.channel, autoUpdate: flags.autoupdate, fromLocal: flags['from-local'], config: this.config, exit: this.exit, getPinToVersion: getPinToVersion });
        return updateCli.runUpdate();
    }
}
exports.default = UpdateCommand;
UpdateCommand.description = 'update the <%= config.bin %> CLI';
UpdateCommand.args = [{ name: 'channel', optional: true }];
UpdateCommand.flags = {
    autoupdate: core_1.Flags.boolean({ hidden: true }),
    'from-local': core_1.Flags.boolean({ description: 'interactively choose an already installed version' }),
};
